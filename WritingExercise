Redis Cache
Redis cache is an open source and in-memory data storage space, which is used to cache the data for quick access. It saves snapshots of the dataset on the disk in a binary file. It supports master-slave replication policy, allowing multiple copies to be asynchronously maintained for the master server. This helps in implementing a highly available cache setup and prevention of data loss when master server goes down, withstanding failures and interruptions. We can use redis in the more efficient way by make read queries on the slave servers while write and update queries on the master servers, in case the replication lag is not more than a few seconds.
Redis stores the data in the key-value format, with the maximum allowed key size is 512 MB. The values are accessed with the corresponding keys. It supports many complex data formats as keys and values rather than the standard String format like Sets, lists, etc. and are binary safe.
It is very important to keep a check on the size of the data stored in the redis cache as it may exceed the cache size and start ignoring the incoming data, resulting in the data loss. To support this in the efficient way, it has a mechanism of timeout(Time-to-live), wherein the keys are expired after the timeout period. It also supports persistent data by setting the timeout period as -1. The other option of capping the data in the cache is to enable the inbuilt mechanism of deleting items in an LRU manner.
The key-value structure of redis adds a disadvantage in using it, as it can be a big problem if one is dealing with inherently relational data. Its structure restricts from making complex search queries and limits it to making queries on the dataset's keys.
Redis supports Pub/Sub messaging model, where senders don't send the messages directly to the receivers asking for it, but published messages are pushed into channels irrespective of the end consumers. Consumers subscribe to the channels expressing their interests in the messages from that channels, without having knowledge of who the publishers are, on the other end. This isolation allows makes it more scalable and provides a more dynamic network system.
Redis offers configurable data persistence technology designed to restore the cache after a planned shutdown or an unplanned failure making the data available for loading immediately. Persisting data to disk makes redis reliable to use it for permanent database rather than just a caching store. It, thereby reduces the cache warm-up time and avoid the need of recalculationg and repopulating the data from primary database.
Redis supports a bunch of metrics and commands to monitor and track the usage of the cache and analyse any abnormal behaviour.
Typically, it can be used for applications where performance and flexibility are more critical than persistence and absolute data integrity.